{
    "version": "https://jsonfeed.org/version/1",
    "title": "行云小院",
    "subtitle": "",
    "icon": "https://simplechun.top/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://simplechun.top",
    "items": [
        {
            "id": "https://simplechun.top/2024/04/10/C_basic/%E6%8C%87%E9%92%88/",
            "url": "https://simplechun.top/2024/04/10/C_basic/%E6%8C%87%E9%92%88/",
            "title": "",
            "date_published": "2024-04-10T05:56:28.926Z",
            "content_html": "<p>指针</p>\n<pre><code>---\ntitle: 文章标题\ndate: 文章发布的时间\ncomment: true   # true/false对应开启/关闭本文章评论\nsticky  : true   # 置顶文章\ntags:\n- C\ncategories:\n    - [计算机科学, Linux]\naudio:\n  - https://music.163.com/song?id=1387098940\naudio: false\n---\n</code></pre>\n<h1 id=\"1-指针是什么\"><a class=\"anchor\" href=\"#1-指针是什么\">#</a> 1. 指针是什么？</h1>\n<p>​\t可以这么理解，计算机内存通过字节单位分成每一格，每一格代表一个字节，而 64 位的计算机中 int 型占四个字节，float 型占 4 个字节，double 型占 8 个字节，char 型占一个字节，指针占 8 个字节，相当于，存储的每一个数据用指针表示时，都占用八个字节，而每一个数据的用指针表示时，指针都指向的是他们的首地址</p>\n<ol>\n<li>指针表示的就是数据在内存中的地址</li>\n<li>指针不是一个数据，而是一个变量</li>\n<li>指针跟数据一样有数据类型，比如 int、float、char、double 等等</li>\n<li>当给指针赋值时，不改变指针的地址，而改变的是该地址的值</li>\n<li><strong>那么得出重要结论：改变量的值方法有两种，通过对变量的值修改；或者通过该变量的地址来改变</strong></li>\n<li>而指针的类型的作用就是：定义该指针的类型不同，访问的时候权限也不同，比如对指针进行加减，int 型会地址 + 4，而 char 型会地址 + 1</li>\n<li>*<em>int x = 10；<em>p = &amp;x 表示指针变量 p，代表该变量指向的数据；p 表示指针地址，代表该数据的存储首地址</em></em></li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//16 进制的 int 数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将变量 n 地址存入到指针型数据 pi 里</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 此时通过地址将数据值改变</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2-在计算机中如何存放数据\"><a class=\"anchor\" href=\"#2-在计算机中如何存放数据\">#</a> 2. 在计算机中如何存放数据</h1>\n<p>​\t当我们在计算机中定义一个变量类型（值可以是数据，也可以是数组等），此时会在内存中开辟一个<strong>随机的</strong>空间，该地址不是固定的，而是每次使用都是不一样的，空间大小遵循 int、float、double 数据类型</p>\n<h1 id=\"3-指针注意事项\"><a class=\"anchor\" href=\"#3-指针注意事项\">#</a> 3. 指针注意事项</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此时定义的 a 当调用以后就会内存释放</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 所以此代码会报错，即为野指针</span></pre></td></tr></table></figure><h1 id=\"4指针变量\"><a class=\"anchor\" href=\"#4指针变量\">#</a> 4. 指针变量</h1>\n<p>​\t指针变量跟正常的数据类型一样的，分为几种如整型，字符型，浮点型等等</p>\n<p>​\tp 就是指针变量，接收的是数据在内存中的存储地址</p>\n<p>​\t*<strong>p 接收的是指针变量 p 对应地址的数据，这个写法代表对指针变量 p 进行解引用，从而得到数值</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指针变量写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这是定义一个指针，而且未对指针进行初始化，此时 * p 接收的是数值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span><span class=\"token comment\">// 上述一行代码其实应该写为这样就更加清除方便了，** 获取变量 n 的地址 **</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 指针变量 p 进行解引用，获取数值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"5-指针的运算\"><a class=\"anchor\" href=\"#5-指针的运算\">#</a> 5. 指针的运算</h1>\n<ol>\n<li>*p 的加减</li>\n<li>p 的加减</li>\n<li>指针与指针之间的加减</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://simplechun.top/2024/04/08/hello-world/",
            "url": "https://simplechun.top/2024/04/08/hello-world/",
            "title": "Hello World",
            "date_published": "2024-04-08T12:50:13.343Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}